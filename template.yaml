apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: golang-starter
  title: Golang Microservice
  description: Create a Golang repo with this template built by members of the Go community
  tags:
    - experimental
    - go

spec:
  owner: web@example.com
  type: service

  parameters:
    - title: Fill in some steps
      required:
        - component_id
        - project_short_description
        - docker_image
        - docker_build_image
        - docker_build_image_version
        - use_logrus_logging
        - use_viper_config
        - use_ci
        - use_cobra_cmd
      properties:
        full_name:
          title: Your name as author
          type: string
          description: Unique name of the component
        github_username:
          title: Your github username
          type: string
          description: Unique name of the component
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        project_short_description:
          title: Description
          type: string
          description: Description of the component
        docker_image:
          title: Docker Image
          type: string
          description: The docker base image to use when running the service
          default: alpine-base-image:latest
        docker_build_image:
          title: Docker Build Image
          type: string
          description: The docker base image to use when building the service
          default: golang
        docker_build_image_version:
          title: Docker Build Image Version
          description: The image version to use when building the service
          type: string
          enum:
            - alpine
          default: alpine
        go_mod_or_dep:
          title: Use go mod or dep
          type: string
          enum:
            - "mod"
            - "dep"
          default: "mod"
        use_docker:
          title: Use docker
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_git:
          title: Use git
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_logrus_logging:
          title: Enable Logrus Logging (https://github.com/sirupsen/logrus)
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_viper_config:
          title: Enable Viper Config (https://github.com/spf13/viper)
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_cobra_cmd:
          title: Enable Cobra CLI Tools (https://github.com/spf13/cobra)
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_ci:
          title: Add CI
          description: Add a CI config to the repo, Gitub Actions, Circle or Travis are the only supported right now
          type: string
          enum:
            - github
            - travis
            - circle
            - none
          default: github
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  # This template can be used on top of an existing software template to add docs.
  # By adding the following and fetching from an absolute URL you can
  # add in the docs template
  steps:
    - id: fetch
      name: Template Golang Service
      action: fetch:cookiecutter
      input:
        url: ./skeleton
        values:
          full_name: "{{ parameters.full_name }}"
          github_username: "{{ parameters.github_username }}"
          component_id: "{{ parameters.component_id }}"
          project_short_description: "{{ parameters.project_short_description }}"
          docker_image: "{{ parameters.docker_image }}"
          docker_build_image: "{{ parameters.docker_build_image }}"
          docker_build_image_version: "{{ parameters.docker_build_image_version }}"
          go_mod_or_dep: "{{ parameters.go_mod_or_dep }}"
          use_docker: "{{ parameters.use_docker }}"
          use_git: "{{ parameters.use_git }}"
          use_logrus_logging: "{{ parameters.use_logrus_logging }}"
          use_viper_config: "{{ parameters.use_viper_config }}"
          use_ci: "{{ parameters.use_ci }}"
          use_cobra_cmd: "{{ parameters.use_cobra_cmd }}"
          destination: "{{ parseRepoUrl parameters.repoUrl }}"
          owner: "{{ parameters.owner }}"

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: "This is {{ parameters.component_id }}"
        repoUrl: "{{ parameters.repoUrl }}"

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: "{{ steps.publish.output.repoContentsUrl }}"
        catalogInfoPath: "/catalog-info.yaml"

  output:
    remoteUrl: "{{ steps.publish.output.remoteUrl }}"
    entityRef: "{{ steps.register.output.entityRef }}"    

#   templater: cookiecutter
#   path: "."
#   schema:
#     required:
#       - component_id
#       - project_short_description
#       - docker_image
#       - docker_build_image
#       - docker_build_image_version
#       - use_logrus_logging
#       - use_viper_config
#       - use_ci
#       - use_cobra_cmd
#     properties:
#       component_id:
#         title: Name
#         type: string
#         description: Unique name of the component
#       project_short_description:
#         title: Description
#         type: string
#         description: Description of the component
#       docker_image:
#         title: Docker Image
#         type: string
#         description: The docker base image to use when running the service
#         default: alpine-base-image:latest
#       docker_build_image:
#         title: Docker Build Image
#         type: string
#         description: The docker base image to use when building the service
#         default: golang
#       docker_build_image_version:
#         title: Docker Build Image Version
#         description: The image version to use when building the service
#         type: string
#         enum:
#           - alpine
#         default: alpine
#       use_logrus_logging:
#         title: Enable Logrus Logging (https://github.com/sirupsen/logrus)
#         type: string
#         enum:
#           - "y"
#           - "n"
#         default: "y"
#       use_viper_config:
#         title: Enable Viper Config (https://github.com/spf13/viper)
#         type: string
#         enum:
#           - "y"
#           - "n"
#         default: "y"
#       use_cobra_cmd:
#         title: Enable Cobra CLI Tools (https://github.com/spf13/cobra)
#         type: string
#         enum:
#           - "y"
#           - "n"
#         default: "y"
#       use_ci:
#         title: Add CI
#         description: Add a CI config to the repo, Gitub Actions, Circle or Travis are the only supported right now
#         type: string
#         enum:
#           - github
#           - travis
#           - circle
#           - none
#         default: github
